#!/usr/bin/perl -w

##########
#
# Copyright (C) 2011-2012 After6 Services LLC. All Rights Reserved.
# This code cannot be redistributed without permission from http://www.after6services.com/.
# For more information, consult your agreement with After6 Services.
#
##########

package MT::Tool::Remove_MSWord_Cruft;
use strict;

use lib qw( extlib lib );
use base qw( MT::Tool );
use Carp qw(confess);
use MT;
use MT::Entry;

sub usage { '[--all] [--blog_ids <id1[,] id2[,]...>] [--author <name>]' }

sub help {
    return q{
        Removes XML and embedded markup originating in Microsoft Word from all entries in selected blogs in the Movable Type instance.

        --all                                       Remove the association from all entries in all blogs in the Movable Type instance.
        --blog_ids <id1[,] id2[,]...>
                                                    Alternatively, remove the association from all entries in the listed blog IDs (the
                                                    list may be either comma or space-delimited).
        --author                                    Username of an author with System Administrator privileges.
    };
}

##########
#
# Default options
#
##########

my $all = 0;
my @blog_ids = ();
my $author = '';

############
#
# This function is called from the base object (MT::Tool) to pick up the command line options in this tool script.
#
############

sub options {
    return (
      'all!'            =>      \$all,
      'blog_ids:s{,}'   =>      \@blog_ids,
      'author=s'        =>      \$author
    );
}

sub cleanUp {

    my $sometext = shift;
    
    # Begin Word 2003 Section #
    
    $sometext =~ s/(<!--\[if gte mso 9\]>)(.*?)(<!\[endif\]-->)//gsi;
    $sometext =~ s/(<!--\[if gte mso 10\]>)(.*?)(<!\[endif\]-->)//gsi;

    # End Word 2003 Section #
    

    # Get rid of non-essential tag attributes

    $sometext =~ s/(target|id|style|class|lang)=\"([^>]*)\"//gi;

    # Remove extra spaces at end of tags

    $sometext =~ s/\ >/>/g;

    # Remove unnecessary tags

    $sometext =~ s/<[\/]?(span|o\:|style|div|pre|font|st1|meta|link|w\:)([^>]*)>//gi;

    # Remove double spaces

    $sometext =~ s/([\ ]+)/ /gi;

    # Remove empty P tags
    
    $sometext =~ s/<p>([\W]+)<\/p>//gsi;
    $sometext =~ s/<p>&nbsp;<\/p>//gsi;

    # Change Brackets to entities
    
    my $leftbrace="&#40;";
    my $rightbrace="&#41;";
    $sometext =~ s/\(/$leftbrace/gi;
    $sometext =~ s/\)/$rightbrace/gi;

    # Remove regular comments, and everything in between
    
    $sometext =~ s/(<!--)([^>]*)>//gsi;
 
    # Look for ampersands and convert to html entity

    $sometext =~ s/& /&amp; /g;
 
    # convert br tags to singleton rules
    
    $sometext =~ s/<br>/<br \/>/gsi;


    # update b and i tags
    
    $sometext =~ s/<b>/<strong>/gsi;
    $sometext =~ s/<\/b>/<\/strong>/gsi;
    $sometext =~ s/<i>/<em>/gsi;
    $sometext =~ s/<\/i>/<\/em>/gsi;
    
    # Remove everything in between if comments

    $sometext =~ s/(<!--\[if)([^>]+)>(.*)(<!\[endif)([^>]+)>//gsi;
    
    # Remove XML tags
    
    $sometext =~ s/<XML>(.*)<\/XML>//gsi;

    return $sometext;

}


sub main {
    
    ############
    #
    # Invoke the base object's main method
    #
    ############

    my $class = shift;
    my ($verbose) = $class->SUPER::main(@_);
    
    ############
    #
    # Tell what this tool script does
    #
    ############

    print "\nremove-msword-cruft -- Removes XML and embedded markup originating in Microsoft Word from all entries in selected blogs in the Movable Type instance.\n\n";
   
    unless ($author) {
        print "Please set --author to the Username for a System Administrator who is removing Microsoft Word cruft from entries.  ie: remove-msword-cruft ... --author Melody\n";
        exit;
    }    

    my $mt = MT->instance();
    
    ##########
    #
    # Look up the author
    #
    ##########

    my $author_id;
    if ($author) {
        require MT::BasicAuthor;
        my $a = MT::BasicAuthor->load({name => $author})
            or die "The author $author is not found:" . MT::BasicAuthor->errstr;
        $author_id = $a->id;
        
        ##########
        #
        # See if the author that was chosen is a System Administrator on this MT instance.
        #
        ##########
        
        unless ($a->is_superuser) {
            print "$author is not an author with System Administrator rights in this MT instance.\n";
            exit;
        }
        
    }
    
    ##########
    #
    # Load the blogs that you want to operate on.
    #
    ##########

    my ($iter, $entry_iter);
    #$MT::DebugMode = 7;
    if ( $all == 1 ) {
        $iter = MT::Blog->load_iter;
    } else {
        
        ##########
        #
        # This code converts a comma or space delimited list of blog IDs into a numeric array of blog IDs.
        #
        ##########
        
        @blog_ids = split(/,\s*/,join(',',@blog_ids));
        @blog_ids = map {int} @blog_ids;
        $iter = MT::Blog->load_iter( { id => \@blog_ids } );
    }
    
    my $count = 0;
    
    ##########
    #
    # Iterate through the selected blogs.
    #
    ##########
    
    while ( my $blog = $iter->() ) {

        print "Processing all entries from ", $blog->name , " to remove cruft from Microsoft Word.\n";
        
        $entry_iter = MT::Entry->load_iter( { blog_id => $blog->id } );
        
        while ( my $entry = $entry_iter->() ) {

            ##########
            #
            # Call cleanUp on the body and $entry->text and $entry->text_more
            #
            ##########

            $entry->text(cleanUp($entry->text()));
            $entry->text_more(cleanUp($entry->text_more()));
            
            ##########
            #
            # Say who made the change and save the entry
            #
            ##########
            
            $entry->modified_by($author_id);
            $entry->save;

        }

        $count++;

        print "." if (++$count % 10) == 0;

    }

##########
#
# Script finishes up here.
#
##########

print "\nremove-msword-cruft complete!\n\n";
}

##########
#
# Invoke main subroutine to start the script.
#
##########

__PACKAGE__->main() unless caller;

1;
