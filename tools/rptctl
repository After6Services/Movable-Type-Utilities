#!/bin/bash
#
# Melody run-periodic-tasks wrapper
# AUTHOR: Jay Allen, Endevver LLC (http://endevver.com)
#
#  Run "rptctl" for the basic usage
#  or "rptctl --help" for the full manpage
#

PERLEXE=${PERLEXE:-/usr/local/bin/perl}
PUBUSER="$USER"
RPTUMASK=${RPTUMASK:-000}
RPTARGS=${RPTARGS:-""}
RPTLOAD=${RPTLOAD:-10}
RPTNICE=${RPTNICE:-15}
RPT=${RPT:-tools/run-periodic-tasks}
RPTWORKERS=${RPTWORKERS:-1}

version_info() {
    cat <<EOU
$(basename $0) version $VERSION: run-periodic-tasks wrapper for Melody and Movable type
EOU
    exit 0
}

usage() {

    [[ -n "$1" ]] && local error=-1 && echo "Error: $1"
    cat <<EOU
Usage: $(basename $0) [-v] [-l LOG] [-w #] [-m DIR] COMMAND
Commands:
    start, stop, restart, status and help
Options:
    -m, --mthome DIR    The absolute path to your MT_HOME directory
    -d, --daemon        Run the script in daemon mode
    -l, --log LOGFILE   Specifies the logfile for run-periodic-tasks output
    -w, --workers N     Number of run-periodic-tasks instances to start
    -u, --umask         Permission mask for published directories and files
    -v, --verbose       Displays more information
    -t, --test          Displays verbose information about settings and what
                        would happen without actually doing anything.
    --help              Displays the full man page for the script
    --version           Displays version number and quits
EOU
    exit $error
}

man() {
    cat <<EOU | ${PAGER:-less}
NAME
    $(basename $0) - A wrapper script used to control run-periodic-tasks

SYNOPSIS
    Usage: $(basename $0) [-v] [-l LOG] [-w NUM] [-m MT_DIR] [-u OCTAL] COMMAND

DESCRIPTION

    This script was developed to more easily and reliably start, stop and
    restart the run-periodic-tasks script in Melody (http://openmelody.org)
    and Movable Type (http://movabletype.org).  It works in a very similar
    manner to the Apache Web Server's 'apachectl' utility.

COMMANDS

    The following command controls the run-periodic-tasks processes for a
    *single* installation as specified by options or environment variables
    described later.  If you want to kill *all* run-periodic-tasks processes
    running on a server, you should use the builtin process control utility
    shipped with your operating system.

    start

        Starts run-periodic-tasks launching as many workers as needed to reach
        the number specified by the -w flag or RPTWORKERS environment
        variable. Once that number has been reached, the command will exit
        without launching new processes.

        This "no-op" behavior makes it possible to run 'rptctl' from cron as
        often as you like (with either the 'start' or 'restart' command) to
        ensure that a full complement of RPTWORKERS processes are running

    stop
        Terminates all running run-periodic-tasks processes for the specified
        installation. (Equivlent to 'kill -INT')

    restart
        Kills all running run-periodic-tasks processes before starting new
        processes.  This is equivalent to "rptctl stop; rptctl start".

    status
        Displays information about active run-periodic-tasks processes.

OPTIONS

    For each option below, you can use the short version with a single dash
    or the longer version with the double dash.  Single letter options must be
    specified separately (i.e. -d -v -w 4 as opposed to -dvw 4).

    -m, --mthome
        (REQUIRED) Specifies the absolute filesystem path to the Movable Type
        directory for the installation you are running periodic tasks for.

    -d, --daemon
        Execute run-periodic-tasks workers in daemon mode.  If you wish to
        run in daemon mode, this flag is required for the start and restart
        commands.

    -l, --log LOGFILE
        Send output to the file LOGFILE. If LOGFILE is not an absolute path
        (i.e. /PATH/TO/LOGFILE) it will be written relative to your MT/Melody
        directory (e.g. --log logs/rebuild.log). If you do not speciy this
        option, output will be discarded.

    -w, --workers NN
        Number of run-periodic-tasks workers to start. Default is 1. As a
        general rule, 1-2 workers per CPU gives the best balance between
        publishing throughput and server performance.

    -u, --umask
        (DEFAULT: 000, equivalent to 'chmod 777') This option allows you to
        specify your desired umask setting which controls the permissions on
        files and directories created via run-periodic-tasks. Other common
        umask settings are 002 and 022 which are equivalent to chmod 755 and
        775, respectively. See the 'umask' manpage for more details.

    -v, --verbose
        By default, the script outputs nothing except warnings and/or errors.
        This option turns on updates for successful builds and a single
        message each time dameonized run-periodic-tasks processes check the
        queue for new jobs.  In general, you should enable this option until
        you are absolutely sure that Publish Queue is working perfectly.

    -t, --test
        Shows you the configuration that would be used by the script after
        processing all environment variables (see below) and command-line
        options and exits. If the -v flag is also specified the sequence of
        commands will also be shown with those filled in values.

    --version
        Displays version information

    -h, --help
        Displays this help documentation

BASIC COMMAND-LINE USAGE

    The minimal command line usage (shown below) will start a single
    run-periodic-task process which run until the job queue is finished,
    outputting any warnings or errors it encounters to the terminal.

        /path/to/rptctl -m /path/to/MT_HOME start

    That could be identically be rearranged and expressed like so using inline
    environment variable assignment.  It's completely up to you.

        MT_HOME=/path/to/MT_HOME  /path/to/rptctl start

    In the form above, $MT_HOME is set transiently: Only for the process being
    executed and only for the lifetime of that process. This makes it
    especially useful for values which deviate from defaults that you've
    previously set in your shell environment (see ENVIRONMENT below).

BASIC CRONTAB USAGE

    You can reliably schedule execution of 'rptctl' using cron. For example,
    the following crontab entry will launch four (4) run-periodic-tasks
    processes for the MT/Melody installation at /PATH/TO/MT_HOME. Each process
    will verbosely output their progress to a log at /PATH/TO/LOGFILE and quit
    once the queue is empty. This will be repeated every 5 minutes:

        */5 * * * *  /PATH/TO/rptctl                    \\
                        -m /PATH/TO/MT_HOME             \\
                        --workers 4                     \\
                        --verbose                       \\
                        --log /PATH/TO/LOGFILE          \\
                    start

    This, however, is a completely barbaric way to operate. Computers don't
    need coffee breaks! They don't have labor unions! Do you pull over to the
    side of the road and stop your car for five minutes after driving each
    mile? No of course you don't. Because that would be stupid.

DAEMONIZED CRONTAB USAGE

    Likewise, there's absolutely no reason to put your publishing on hiatus.
    So instead, we use "daemon mode". By simply including the flag --daemon in
    your command line, you instruct the program to stay alive after finishing
    the jobs in the queue. That way, the second a new job comes in,
    run-periodic-tasks is on it.

    The following cron entry does the same as above except that it will launch
    four (4) _daemonized_ processes upon the first execution and then, in
    subsequent executions, relaunch any which may have died:

        */5 * * * *  /PATH/TO/rptctl                    \\
                        -m /PATH/TO/MT_HOME             \\
                        --workers 4                     \\
                        --verbose                       \\
                        --log /PATH/TO/LOGFILE          \\
                        --daemon                        \\
                    start

    The key to crontab execution is the --workers (RPTWORKERS) value because
    it imposes a limit to the number of run-periodic-tasks processes allowed
    to run simultaneously. In fact, if the command above is launched and
    there's a full complement of active run-periodic-tasks processes, it
    quickly exits without doing a thing. Because of this, you can run it once
    per minute with no deleterious effects if you really want to stay on top
    of your processes kickstarting any which may have died.

IMPORTANT NOTE - DAEMONIZED MEMORY LEAK BUG
    If you are running an older version of MT and find that the memory usage
    by your run-periodic-tasks processes is constantly increasing, you are
    affected by a bug fixed in later versions and all versions of Melody. To
    deal with this using daemonized process, you can swap the "start" command
    for the use the "restart" command, which will constantly renew your pool
    of run-periodic-tasks processes with fresh, memory piglets.

        */5 * * * *  /PATH/TO/rptctl                    \\
                        -m /PATH/TO/MT_HOME             \\
                        --workers 4                     \\
                        --verbose                       \\
                        --log /PATH/TO/LOGFILE          \\
                        --daemon                        \\
                    restart

POWER USER TIP
    While most MT-related utilities rely on your current working directory
    being the MT/Melody directory, 'rptctl' was designed to be executed from
    anywhere. So for extra-awesome ease-of-use, move/copy/symlink rptctl to a
    directory in your path (e.g. /usr/local/bin, $HOME/bin, etc).

    With judicious assignment of RPT-related environment variables in your
    shell's init scripts, controlling MT can be as easy as issuing any of the
    following from anywhere on your system:

        * rptctl start
        * rptctl stop
        * rptctl restart

ENVIRONMENT
    For frequent command line use or execution via crontab on a server with
    only a single MT/Melody installation, you should set up each option as
    environment variables in your shell's startup script. Below is a table
    showing the environment variables which map to each of the command-line
    options.

        MT_HOME         Equivalent to --mthome.
        RPTLOG          Equivalent to --log.
        RPTWORKERS      Equivalent to --workers
        RPTUMASK        Equivalent to --umask.
        RPTDAEMONIZE    When set to 1, it is equivalent to --daemon
        RPTVERBOSE      When set to 1, it is equivalent to --verbose.

    For example, under Bash, you would put the following in your .bashrc:

        export MT_HOME=/var/www/cgi-bin/mt
        export RPTLOG=/var/log/mtpub.log
        export RPTWORKERS=4
        export RPTDAEMONIZE=1
        export RPTVERBOSE=1

    Then, once those variables are set in your environment (will require
    re-sourcing your startup script or logging back in), you can simply
    execute this script as:

        rptctl start
        rptctl stop
        rptctl restart
        etc...

    NOTE: Options specified on the command-line take precedence over these
    environment variables. This is useful if you run multiple installations
    and want to set defaults for all of your installations yet override some
    on a per-installation basis or if you want to display explicit
    command-line execution while sending crontab output to a log.

RETURN VALUES
     The test utility exits with one of the following values:

     0       expression evaluated to true.

     1       expression evaluated to false or expression was missing.

     >1      An error occurred.

DISCLAIMER
       The author of this utility will be held no responsibility for any
       damages and losses of data and/or files that may be caused by the use
       thereof.

       Use me at your own risk!

AUTHOR
       Jay Allen, Endevver LLC, http://endevver.com

COPYRIGHT
       Copyright 2008, Endevver LLC

       This script is free software licensed under the Perl Artistic License;
       you can redistribute it and/or modify it under the same terms as Perl.

EOU
    exit 0
}

dispatch() {
    while [ "$1" ]; do
        [ $VERBOSE ] && { echo "$1"; echo; }
        [ $TEST ]    || eval "$1";
        shift;
    done
}

progress() {
    [ $VERBOSE ] || return
    while [ "$1" ]; do echo ">>> $1"; shift; done
}

parse_options() {
    [[ -z "$1" ]] && usage

    while [[ "$1" =~ ^(-|restart|start|stop|status|help) ]]; do
        case "${1//-/}" in
            m | mthome   ) MT_HOME=$2; shift;;
            d | daemon   ) RPTDAEMONIZE=1;;
            l | log      ) RPTLOG=$2; shift;;
            w | workers  ) RPTWORKERS=$2; shift;;
            u | umask    ) RPTUMASK=$2; shift;;
            v | verbose  ) RPTVERBOSE=1;;
            t | test     ) TEST=1;;
            version      ) version_info;;
            help         ) man;;
            restart      ) RESTART=1;;
            start        ) START=1;;
            stop         ) STOP=1;;
            status       ) STATUS=1;;
            *) usage "Unknown option: $1";;
        esac
        shift
    done

    # Aliases
    [ $TEST ] && RPTVERBOSE=1
    [ $RPTVERBOSE == 1 ] && VERBOSE=1

    [ "$MT_HOME" ]       || usage "MT home directory not specified"
    [ -d "$MT_HOME" ]    || usage "$MT_HOME not found or is not a directory"
    [ -e "$MT_HOME/$RPT" ] || usage "$MT_HOME/$RPT not found"
    [[ "${RPTLOG:=/dev/null}" =~ ^/ ]] || RPTLOG="$MT_HOME/$RPTLOG"

    if [[ $RPTDAEMONIZE == 1 ]]; then
        RPTARGS="$RPTARGS --load $RPTLOAD --daemon"
    fi

    export MT_HOME=${MT_HOME%%/}
    export ORACLE_HOME=/opt/oracle/product/client_10.2.0.4.a
    export LD_LIBRARY_PATH=/opt/oracle/product/client_10.2.0.4.a/lib
}

show_config() {
    echo "Using the following values:"
    for I in MT_HOME   RPTLOG   RPTWORKERS   RPTDAEMONIZE   RPTVERBOSE START STOP RESTART; do
        printf "   %-10s %s\n" "$I:" "${!I}"
    done
}

start_process() {
    local args="$1";
    local msg="Starting run-periodic-tasks process"
    [ $TEST ] || echo "$msg"  >> $RPTLOG
    progress "$msg"
    dispatch "MT_HOME='$MT_HOME' nohup nice -n $RPTNICE $PERLEXE -I$MT_HOME/lib -I$MT_HOME/extlib $MT_HOME/$RPT --verbose $args >> $RPTLOG 2>&1 &"
}

stop() {

    [[ -n "$psoptions" ]] || check_processes

    if [ "$psout" ]; then
        PIDS=$(echo "$psout" | awk {'print $2'} | xargs )
        progress "run-periodic-tasks processes to kill:"
        [[ $VERBOSE ]] && echo "$psout"
        dispatch "kill -KILL $PIDS"
    else
        progress "No run-periodic-tasks processes exist"
    fi
    psout=""
    procs=0
    procsrandom=0
}

start() {

    [[ -n "$psoptions" ]] || check_processes

    #
    # Ensure one RPT process running with --randomly flag
    #
    if [[ "$procsrandom" == 0 ]]; then
        progress "Starting random process"
        ARGS="$RPTARGS --randomly"
        start_process "$ARGS"
        procs=$(($procs+1))
    fi

    #
    # Start as many other normal (i.e. non-random) RPT processes as requested
    #
    while [[ $procs < $RPTWORKERS ]]; do
        ARGS="$RPTARGS"
        start_process "$ARGS"
        procs=$(($procs+1))
    done
}

status() {

    [[ -n "$psoptions" ]] || check_processes

    # Explicitly turn on verbose for output
    VERBOSE=1
    # Report on processes
    progress "$MT_HOME: $procs run-periodic-tasks processes running, $procsrandom with the --randomly flag"
}

check_processes() {

    if [[ -n "$PSOPTIONS" && $(ps "$PSOPTIONS" 2>/dev/null) ]]; then
        psoptions="$PSOPTIONS"

    elif [[ $(ps aux  2>/dev/null) ]]; then
        psoptions="aux"    # BSD systems

    elif [[ $(ps ax  2>/dev/null) ]]; then
        psoptions="ax"    # Deviant BSD-ish systems

    elif [[ $(ps ax  2>/dev/null) ]]; then
        psoptions="-ef"   # Other systems

    else
        usage "Could not get process list. Please set PSOPTIONS environment variable with the correct options for your system's ps utility"
    fi

    # Get a count of run-periodic-tasks --daemon processes
    psout="$(ps $psoptions | grep "^$PUBUSER.*$MT_HOME/$RPT" | grep -v grep)"
    procs=$(($(echo "$psout" | egrep '[A-Za-z0-9]' | wc -l)))

    # Count how many of those are running with the --randomly flag
    procsrandom=$((0+$(echo "$psout" | egrep "\--randomly" | wc -l)))
}

parse_options "$@"
[ $TEST ] && show_config

if [[ -n "$RPTQUIT" ]]; then
    echo "RPTQUIT is set on this server indicating RPT should not be run" > /dev/stderr
    exit 0
fi

cd $MT_HOME
[[ -n "$RPTUMASK" ]] && umask $RPTUMASK

[[ -n "$STATUS" ]] && status
[[ -n "$RESTART" ]] && stop && sleep 3 && start && exit 0
[[ -n "$STOP" ]] && stop
[[ -n "$START" ]] && start
exit 0