#!/usr/bin/perl -w

##########
#
# Copyright (C) 2011 After6 Services LLC. All Rights Reserved.
# This code cannot be redistributed without permission from http://www.after6services.com/.
# For more information, consult your agreement with After6 Services.
#
##########

package MT::Tool::Add_Template_To_Range;
use strict;

use lib qw( extlib lib );
use base qw( MT::Tool );
use Carp qw(confess);
use MT;
use MT::Template;
use MT::Permission;

sub usage { '[--templatefile <your-template-name.tmpl>] [--templatename <Your Template>] [--templateoutfile <your-outfile.html>] [--templatetype <type>] [--blogstartid <start-id>] [--blogendid <end-id>] [--author <name>]' }

sub help {
    return q{
        Adds/updates a template in selected blogs in the Movable Type instance.

        --templatefile <your-template-name.tmpl>    File where the template text is stored, also the outfile name.
        --templatename <Your Template>              The name of the template to be installed.
        --templateoutfile <your-outfile.html>       The name of the the file to be created by the template.
        --templatetype <type>                       The type of template (defaults to 'index').
        --templatebuildtype <buildtype>             The build type of the template (defaults to 1 = 'static')
        --blogstartid <id>                          Blog ID at which insertions should begin.
        --blogendid <id>                            Blog ID afterwhich inserstions should stop.
        --author                                    Name of an author with System Administrator privileges.
    };
}

##########
#
# Default options
#
##########

my ($templatefile, $templatename);
my $templatetype = 'index';
my $templateoutfile = 'add-template-index.html';
my $templatebuildtype = 1;
my $blogstartid = 1;
my $blogendid = 1;
my $author = '';

############
#
# This function is called from the base object (MT::Tool) to pick up the command line options in this tool script.
#
############

sub options {
    return (
      'templatefile=s'  =>      \$templatefile,
      'templatename=s'  =>      \$templatename,
      'templatetype=s'  =>      \$templatetype,
      'templateoutfile=s' =>    \$templateoutfile,
      'templatebuildtype=i' =>  \$templatebuildtype,
      'blogstartid=s'   =>      \$blogstartid,
      'blogendid=s'   =>        \$blogendid,
      'author=s'        =>      \$author
    );
}

sub main {
    
    ############
    #
    # Invoke the base object's main method
    #
    ############

    my $class = shift;
    my ($verbose) = $class->SUPER::main(@_);
    
    ############
    #
    # Tell what this tool script does
    #
    ############

    print "add-template -- Adds/updates a template in selected blogs in the Movable Type instance.\n";
   
    unless ($author) {
        print "Please set --author to set System Administrator when installing templates.  ie: add-template ... --author Melody\n";
        exit;
    }

    my $mt = MT->instance();
    my $tmpl_text;
    
    ##########
    #
    # Attempt to read the contents of $templatefile into $tmpl_text.
    #
    ##########

    if (defined($templatefile)) {
        local $/= undef;
        open FILE, $templatefile or die "Couldn't open file: $!";
        binmode FILE;
        $tmpl_text = <FILE>;
        close FILE;
    } else {
        print "Please set --templatefile to indicate the file from which the template text should be read.  ie: add-template ... --templatefile my-template.tmpl\n";
        exit;
    }
    
    ##########
    #
    # Look up the author
    #
    ##########

    my $author_id;
    if ($author) {
        require MT::BasicAuthor;
        my $a = MT::BasicAuthor->load({name => $author})
            or die "Not found user $author:" . MT::BasicAuthor->errstr;
        $author_id = $a->id;
        
        ##########
        #
        # See if the author that was chosen is a System Administrator on this MT instance.
        #
        ##########
        
        unless ($a->is_superuser) {
            print "$author is not an author with System Administrator rights in this MT instance.\n";
            exit;
        }
        
    }
    
    ##########
    #
    # Load the blogs that should have the template installed or updated.
    #
    ##########

    my $count;
    #$MT::DebugMode = 7;
    if (($blogstartid > 0) && ($blogstartid <= $blogendid))
    {
        $count = $blogstartid;
    } else {
        die "\$blogstartid must be greater than zero.  \$blogendid must be greater than or equal to \$blogstartid.\n";
    }
    
    ##########
    #
    # Iterate through the selected blogs.
    #
    ##########
    
    do {
        my $blog = MT::Blog->load( {'id' => $count });
        
        if (defined($blog)) {
            my $template = MT::Template->load( {'name' => $templatename,
                                                'blog_id' => $blog->id });
        
            print "Processing ", $count , " blog.\n" if $count % 100 == 0;
        
            ##########
            #
            # If the template already exists, then update it.  Otherwise add the template.
            #
            ##########
                                            
            if (defined($template)) {
            
                # print "Updating template in blog ID: ", $blog->id, ".\n" if $count % 100 == 0;
            
                if (ref($tmpl_text)) {
                    $template->text(\$tmpl_text);
                } else {
                    $template->text($tmpl_text);
                }
          
            } else {

                # print "Adding template to blog with blog ID: ", $blog->id, ".\n" if $count % 100 == 0;
    
                $template = MT::Template->new(
                                               type => 'scalarref',
                                               source => ref $tmpl_text ? $tmpl_text : \$tmpl_text
                                               );            
            }
        

           $template->name($templatename);
           $template->blog_id($blog->id);
           $template->modified_by($author_id);
           $template->type($templatetype);
           $template->outfile($templateoutfile);
       
          ##########
          #
          # Templates of type 'index' with build types of 1 should be static templates that are rebuilt every time an entry or comment is added.
          #
          ##########
       
         $template->build_type($templatebuildtype);
    
         $template->save or die $template->errstr;
       
          ##########
          #
          # Force this template to be rebuilt, so the output exists as soon as possible.  When the template is rebuilt is dependent upon the
          # MT instance and blog configuration settings.
          #
          ##########

         $mt->rebuild_indexes(
                                 BlogID   => $blog->id,
                                 Template => $template,
                                 Force    => 1
         )
         || die "Rebuild error: ", $mt->errstr;
       
        ##########
        #
        # Undefine $template to try to encourage the freeing of memory if this script becomes long-running.
        #
        ##########
       
        undef $template;
        
        } else {
            
            ##########
            #
            # Warn the user that the blog at this ID doesn't exist.
            #
            ##########
            
            print "Warning: The blog at Blog ID ", $count, " does not appear to exist.\n"; 
        }
        

    } until ($count++ == $blogendid);
    
##########
#
# Script finishes up here.
#
##########

print "\nadd-template complete!\n\n";
}

##########
#
# Invoke main subroutine to start the script.
#
##########

__PACKAGE__->main() unless caller;

1;
